# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET         /                                        controllers.Application.index()
GET         /mute                                    controllers.Application.index()
GET         /mp3                                     controllers.Application.index()
GET         /sjs                                     controllers.Application.sjs()
GET         /client/*file                            controllers.Application.sjsClient(file)


# Map static resources from the /public folder to the /assets URL path
GET         /assets/*file                            controllers.MyAssets.asset(file)
GET         /js/*file                                controllers.MyAssets.javascript(file)

# SongController! (Lazy, because fetching all the songs takes a while)
GET         /data/randomSong                         songs.SongController.randomSong
GET         /data/randomSong/mp3                     songs.SongController.randomMp3Song
GET         /data/randomSong/flac                    songs.SongController.randomFlacSong
GET         /data/albums/*path                       songs.SongController.album(path)
GET         /data/discs/:disc/*path                  songs.SongController.discNumber(path, disc)
GET         /data/songs/*path                        songs.SongController.song(path)
GET         /data/nextSong                           songs.SongController.nextSong(path)

# Streamer
GET         /stream/download/*path                   controllers.Streamer.download(path)
GET         /stream/play/*path                       controllers.Streamer.playSong(path)

# Posters
GET         /posters/*path                           controllers.Posters.image(path)

# Lyrics
GET         /lyrics/*path                            backend.lyrics.LyricsController.get(path)
POST        /lyrics/push/*path                       backend.lyrics.LyricsController.push(path)
POST        /lyrics/instrumental/song/*path          backend.lyrics.LyricsController.setInstrumentalSong(path)
POST        /lyrics/instrumental/artist/*path        backend.lyrics.LyricsController.setInstrumentalArtist(path)

# External
GET         /external/refresh/*path                  backend.external.ExternalController.refresh(path)
POST        /external/recons/*path                   backend.external.ExternalController.updateRecon(path)
GET         /external/*path                          backend.external.ExternalController.get(path)

# Searcher
GET         /search/*path                            backend.search.SearchController.search(path)

# Web sockets
GET         /ws/console                              controllers.websockets.ConsoleSocket.accept

# Playlist
GET         /playlist/queue                          playlist.PlaylistController.getQueue
POST        /playlist/queue                          playlist.PlaylistController.setQueue()
GET         /playlist/state                          playlist.PlaylistController.getState
POST        /playlist/state                          playlist.PlaylistController.setState()

# Index
GET         /index/index                             backend.search.IndexController.index()

# Albums (Lazy, because ExistingAlbums takes a while to load)
GET         /new_albums/index.html                   @backend.albums.AlbumsController.index
GET         /new_albums/albums/                      @backend.albums.AlbumsController.albums
PUT         /new_albums/artist/remove/*artist        @backend.albums.AlbumsController.removeArtist(artist)
PUT         /new_albums/artist/ignore/*artist        @backend.albums.AlbumsController.ignoreArtist(artist)
PUT         /new_albums/album/remove                 @backend.albums.AlbumsController.removeAlbum
PUT         /new_albums/album/ignore                 @backend.albums.AlbumsController.ignoreAlbum

# Recent
GET         /recent/albums/                          backend.recent.RecentController.recent(amount: Int = 10)
GET         /recent/albums/:amount                   backend.recent.RecentController.recent(amount: Int)
GET         /recent/double/                          backend.recent.RecentController.double(amount: Int = 10)
GET         /recent/double/:amount                   backend.recent.RecentController.double(amount: Int)
GET         /recent/last                             backend.recent.RecentController.last
GET         /recent/since/:duration                  backend.recent.RecentController.since(duration)
# Not realy a GET, but this makes it easier to invoke from the browser
GET         /recent/last/debug                       backend.recent.RecentController.debugLast()
GET         /ws/last_album                           backend.recent.RecentController.accept

# Downloader
#GET         /download/*path                          backend.pkg.DownloaderController.download(path)
# Scorer
GET         /score/*path                             backend.scorer.ScorerController.getScore(path)
# Doesn't make a whole of sense from a REST stand point, but it's easier than fiddling with
# HTTP parameters combined with a suffix path.
PUT         /score/song/:score/*path                 backend.scorer.ScorerController.updateSongScore(path, score)
PUT         /score/album/:score/*path                backend.scorer.ScorerController.updateAlbumScore(path, score)
PUT         /score/artist/:score/*path               backend.scorer.ScorerController.updateArtistScore(path, score)
